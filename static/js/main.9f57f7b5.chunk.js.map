{"version":3,"sources":["App.js","index.js"],"names":["POSSIBLE_WORDS","LETTERS","DEFAULT_STATE","numberOfWrongGuesses","lettersAlreadyUsed","WordToGuess","wordToGuess","className","map","letter","index","key","includes","LetterButton","alreadyClicked","onClick","GuessCount","EndMessage","text","ResetButton","ShowWordToGuess","App","state","generateWordToGuess","handleLetterClick","setState","resetGame","Math","floor","random","length","this","won","every","i","lost","Component","ReactDOM","render","document","getElementById"],"mappings":"yMAqCMA,G,MAAiB,CACrB,UACA,UACA,oBACA,WACA,OACA,QACA,YACA,WACA,UACA,OACA,OACA,YACA,cACA,kBACA,YACA,UACA,UACA,QACA,aAKIC,EAAO,YAAO,8BAGdC,EAAgB,CACpBC,qBAAsB,EACtBC,mBAAoB,IAGhBC,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaF,EAAhB,EAAgBA,mBAAhB,OAClB,yBAAKG,UAAU,iBACZ,YAAID,GAAaE,KAChB,SAACC,EAAQC,GAAT,OACA,0BAAMC,IAAKD,GACRN,EAAmBQ,SAASH,GAAUA,EAZzB,IAWhB,UAMAI,EAAe,SAAC,GAAD,IAAGJ,EAAH,EAAGA,OAAQK,EAAX,EAAWA,eAAgBC,EAA3B,EAA2BA,QAA3B,OACnB,yBAAKR,UAAS,uBAAkBO,GAAkBC,QAAS,kBAAMA,EAAQN,KACvE,0BAAMF,UAAU,UACbE,KAKDO,EAAa,SAAC,GAAD,IAAGb,EAAH,EAAGA,qBAAH,OACjB,yBAAKI,UAAU,WAAf,6BA7B4B,EA6BgDJ,IAGxEc,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACjB,yBAAKX,UAAU,eAAf,aAAwCW,EAAxC,OAGIC,EAAc,SAAC,GAAD,IAAGJ,EAAH,EAAGA,QAAH,OAClB,yBAAKR,UAAU,eAAeQ,QAASA,GAAvC,+BAGIK,EAAkB,SAAC,GAAD,IAAGd,EAAH,EAAGA,YAAH,OACtB,yBAAKC,UAAU,eAAf,kCAC2B,6BACxB,YAAID,GAAaE,KAAI,SAACC,EAAQC,GAAT,OAAmB,0BAAMC,IAAKD,GAAQD,MAF9D,MAmEaY,E,4MA5DbC,M,2BACKpB,G,IACHI,YAAa,EAAKiB,wB,EAOpBC,kBAAoB,SAAAf,IACjB,EAAKa,MAAMlB,mBAAmBQ,SAASH,IACtC,EAAKgB,SAAS,CACZrB,mBAAmB,GAAD,mBAAM,EAAKkB,MAAMlB,oBAAjB,CAAqCK,OAG1D,EAAKa,MAAMlB,mBAAmBQ,SAASH,KAAY,EAAKa,MAAMhB,YAAYM,SAASH,IAClF,EAAKgB,SAAS,CACZtB,qBAAsB,EAAKmB,MAAMnB,qBAAuB,K,EAI9DuB,UAAY,WACV,EAAKD,SAAL,2BACKvB,GADL,IAEEI,YAAa,EAAKiB,0B,oEAlBpB,OAAOvB,EAAe2B,KAAKC,MAAMD,KAAKE,SAAW7B,EAAe8B,W,+BAsBxD,IAAD,SAC2DC,KAAKT,MAA/DhB,EADD,EACCA,YAAaH,EADd,EACcA,qBAAsBC,EADpC,EACoCA,mBACrC4B,EAAM,YAAI1B,GAAa2B,OAAM,SAAAC,GAAC,OAAI9B,EAAmBQ,SAASsB,MAC9DC,EAAOhC,GA/Ea,EAiF1B,OACE,yBAAKI,UAAU,SACb,kBAAC,EAAD,CACED,YAAaA,EACbF,mBAAoBA,IAErBH,EAAQO,KAAI,SAAAC,GAAM,OACf,kBAAC,EAAD,CACEA,OAAQA,EACRM,QAAS,EAAKS,kBACdV,eAAgBV,EAAmBQ,SAASH,GAC5CE,IAAKF,OAGX,kBAAC,EAAD,CAAYN,qBAAsBA,IAEjC6B,GAAO,kBAAC,EAAD,CAAYd,KAAK,aACxBc,GAAO,kBAAC,EAAD,CAAajB,QAASgB,KAAKL,YAElCS,GAAQ,kBAAC,EAAD,CAAYjB,KAAK,UACzBiB,GAAQ,kBAAC,EAAD,CAAapB,QAASgB,KAAKL,YACnCS,GAAQ,kBAAC,EAAD,CAAiB7B,YAAaA,S,GAvD7B8B,aCrGlBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.9f57f7b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n// Ressources found here: http://www.idees-gages.com/mots-jeu-pendu.php\n// const POSSIBLE_WORDS = [\n//   \"BALLAST\", \n//   \"BRETZEL\",\n//   \"DJEMBE\",\n//   \"JOUXTER\",\n//   \"RENEGAT\",\n//   \"STROPHE\",\n//   'UKELELE',\n//   \"ZOZOTER\",\n//   \"CITHARE\", \n//   \"QUETSCHE\",\n//   \"PASTICHE\",\n//   \"CAPELINE\",\n//   \"PASTICHE\",\n//   \"SYMPTOME\",\n//   \"ZEPPELIN\", \n//   \"TOMAHAWK\", \n//   \"BALALAIKA\", \n//   \"ASEPTISER\",\n//   \"KLAXONNER\",\n//   \"PRINTEMPS\",\n//   \"XYLOPHONE\",\n//   \"QUEMANDER\",\n//   \"FLIBUSTIER\",\n//   \"APOCALYPSE\",\n//   \"CONTROVERSE\",\n//   \"LABYRINTHE\",\n//   \"SOLILOQUER\",\n//   \"COQUELICOT\",\n//   \"ACROSTICHE\",\n//   \"MAHARADJAH\"\n// ]\n\nconst POSSIBLE_WORDS = [\n  \"NEURONE\",\n  \"CERVEAU\",\n  \"NEUROTRANSMETTEUR\",\n  \"DENDRITE\",\n  \"SOMA\",\n  \"AXONE\",\n  \"RECEPTEUR\",\n  \"VESICULE\",\n  \"SYNAPSE\",\n  \"IONS\",\n  \"GLIE\",\n  \"MICROGLIE\",\n  \"PHAGOCYTOSE\",\n  \"OLIGODENDROCYTE\",\n  \"ASTROCYTE\",\n  \"GLUCOSE\",\n  \"LACTATE\",\n  \"CRANE\",\n  \"CERVELET\"\n]\n\nconst maximumOfWrongGuesses = 4\n\nconst LETTERS = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ']\nconst HIDDEN_SYMBOL = \"_\"\n\nconst DEFAULT_STATE = {\n  numberOfWrongGuesses: 0,\n  lettersAlreadyUsed: [],\n}\n\nconst WordToGuess = ({ wordToGuess, lettersAlreadyUsed }) => (\n  <div className=\"word-to-guess\">\n    {[...wordToGuess].map(\n      (letter, index) =>(\n      <span key={index}>\n        {lettersAlreadyUsed.includes(letter) ? letter : HIDDEN_SYMBOL} </span>\n    ))}\n  </div>\n)\n\nconst LetterButton = ({ letter, alreadyClicked, onClick }) => (\n  <div className={`letterButton ${alreadyClicked}`} onClick={() => onClick(letter)}>\n    <span className=\"letter\">\n      {letter}\n    </span>\n  </div>\n)\n\nconst GuessCount = ({ numberOfWrongGuesses }) => (\n  <div className=\"guesses\">Nombre d'essais restants: {maximumOfWrongGuesses - numberOfWrongGuesses}</div>\n)\n\nconst EndMessage = ({ text }) => (\n  <div className=\"end-message\">Vous avez {text} !</div>\n)\n\nconst ResetButton = ({ onClick }) => (\n  <div className=\"reset-button\" onClick={onClick}> Cliquez ici pour rejouer </div>\n)\n\nconst ShowWordToGuess = ({ wordToGuess }) => (\n  <div className=\"end-message\">\n    Le mot à deviner était : <br /> \n    {[...wordToGuess].map((letter, index) =>(<span key={index}>{letter}</span>))}.\n  </div>\n)\n\nclass App extends Component {\n  state = {\n    ...DEFAULT_STATE,\n    wordToGuess: this.generateWordToGuess(),\n  }\n\n  generateWordToGuess(){\n    return POSSIBLE_WORDS[Math.floor(Math.random() * POSSIBLE_WORDS.length)]\n  }\n\n  handleLetterClick = letter => {\n    !this.state.lettersAlreadyUsed.includes(letter) && (\n      this.setState({ \n        lettersAlreadyUsed: [...this.state.lettersAlreadyUsed, letter],\n      }))\n      \n    !this.state.lettersAlreadyUsed.includes(letter) && !this.state.wordToGuess.includes(letter) && (\n      this.setState({ \n        numberOfWrongGuesses: this.state.numberOfWrongGuesses + 1,\n      }))\n  }\n\n  resetGame = () => {\n    this.setState({\n      ...DEFAULT_STATE,\n      wordToGuess: this.generateWordToGuess(),\n    })\n  }\n\n  render() {\n    const { wordToGuess, numberOfWrongGuesses, lettersAlreadyUsed } = this.state\n    const won = [...wordToGuess].every(i => lettersAlreadyUsed.includes(i))\n    const lost = numberOfWrongGuesses >= maximumOfWrongGuesses\n\n    return (\n      <div className=\"pendu\">\n        <WordToGuess \n          wordToGuess={wordToGuess} \n          lettersAlreadyUsed={lettersAlreadyUsed} \n        />\n        {LETTERS.map(letter => (\n            <LetterButton \n              letter={letter}\n              onClick={this.handleLetterClick}\n              alreadyClicked={lettersAlreadyUsed.includes(letter)}\n              key={letter}\n            />\n          ))}\n        <GuessCount numberOfWrongGuesses={numberOfWrongGuesses} />\n\n        {won && <EndMessage text=\"gagné\"/>}\n        {won && <ResetButton onClick={this.resetGame}/>}\n\n        {lost && <EndMessage text=\"perdu\"/>}\n        {lost && <ResetButton onClick={this.resetGame}/>}\n        {lost && <ShowWordToGuess wordToGuess={wordToGuess}/>}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}